model {
    # Priors and constraints
    for (t in 1:(n.occasions-1)){
        phi.intro[t] <- mean.phi2.intro
        phi.native[t] <- mean.phi2.native
        phi.scrub[t] <- mean.phi2.scrub
        p.intro[t] <- mean.p.intro
        p.native[t] <- mean.p.native
        p.scrub[t] <- mean.p.scrub
    }
    mean.phi2.intro ~ dunif(0, 1)          # Prior for mean survival in introduced habitat
    mean.phi2.native ~ dunif(0, 1)           # Prior for mean survival in native habitat
    mean.phi2.scrub ~ dunif(0, 1)           # Prior for mean survival in scrub
    mean.p.intro ~ dunif(0, 1)               # Prior for mean recapture
    mean.p.native ~ dunif(0, 1)
    mean.p.scrub ~ dunif(0, 1)
    # Define the multinomial likelihood
    for (t in 1:(n.occasions-1)){
        marr.i[t,1:n.occasions] ~ dmulti(pr.i[t,], r.i[t])
        marr.n[t,1:n.occasions] ~ dmulti(pr.n[t,], r.n[t])
        marr.s[t,1:n.occasions] ~ dmulti(pr.s[t,], r.s[t])
    }
    
    # Define the cell probabilities of the m-arrays
    # Main diagonal
    for (t in 1:(n.occasions-1)){
        q.intro[t] <- 1-p.intro[t]            # Probability of non-recapture
        q.native[t] <- 1-p.native[t]
        q.scrub[t] <- 1-p.scrub[t]
        pr.i[t,t] <- phi.intro[t]*p.intro[t]
        pr.n[t,t] <- phi.native[t]*p.native[t]
        pr.s[t,t] <- phi.scrub[t]*p.scrub[t]
        # Above main diagonal
        for (j in (t+1):(n.occasions-1)){
            pr.i[t,j] <- prod(phi.intro[t:j])*prod(q.intro[t:(j-1)])*p.intro[j]
            pr.n[t,j] <- prod(phi.native[t:j])*prod(q.native[t:(j-1)])*p.native[j]
            pr.s[t,j] <- prod(phi.scrub[t:j])*prod(q.scrub[t:(j-1)])*p.scrub[j]
        } #j
        # Below main diagonal
        for (j in 1:(t-1)){
            pr.i[t,j] <- 0
            pr.n[t,j] <- 0
            pr.s[t,j] <- 0
        } #j
    } #t
    # Last column: probability of non-recapture
    for (t in 1:(n.occasions-1)){
        pr.i[t,n.occasions] <- 1-sum(pr.i[t,1:(n.occasions-1)])
        pr.n[t,n.occasions] <- 1-sum(pr.n[t,1:(n.occasions-1)])
        pr.s[t,n.occasions] <- 1-sum(pr.s[t,1:(n.occasions-1)])
    } #t
    
    # Assess model fit using Freeman-Tukey statistic
    # Compute fit statistics for observed data
    for (t in 1:(n.occasions-1)){
        for (j in 1:n.occasions){
            expmarr.i[t,j] <- r.i[t]*pr.i[t,j]
            expmarr.n[t,j] <- r.n[t]*pr.n[t,j]
            expmarr.s[t,j] <- r.s[t]*pr.s[t,j]
            E.org.i[t,j] <- pow((pow(marr.i[t,j], 0.5)-pow(expmarr.i[t,j], 0.5)), 2)
            E.org.n[t,j] <- pow((pow(marr.n[t,j], 0.5)-pow(expmarr.n[t,j], 0.5)), 2)
            E.org.s[t,j] <- pow((pow(marr.s[t,j], 0.5)-pow(expmarr.s[t,j], 0.5)), 2)
        }
    }
    # Generate replicate data and compute fit stats from them
    for (t in 1:(n.occasions-1)){
        marr.new.i[t,1:n.occasions] ~ dmulti(pr.i[t,], r.i[t])
        marr.new.n[t,1:n.occasions] ~ dmulti(pr.n[t,], r.n[t])
        marr.new.s[t,1:n.occasions] ~ dmulti(pr.s[t,], r.s[t])
        for (j in 1:n.occasions){
            E.new.i[t,j] <- pow((pow(marr.new.i[t,j], 0.5)-pow(expmarr.i[t,j], 0.5)), 2)
            E.new.n[t,j] <- pow((pow(marr.new.n[t,j], 0.5)-pow(expmarr.n[t,j], 0.5)), 2)
            E.new.s[t,j] <- pow((pow(marr.new.s[t,j], 0.5)-pow(expmarr.s[t,j], 0.5)), 2)
        }
    }
    fit <- sum(E.org.i[,]) + sum(E.org.n[,]) + sum(E.org.s[,])
    fit.new <- sum(E.new.i[,]) + sum(E.new.n[,]) + sum(E.new.s[,])
}

